<% loader = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/locator/loader.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
<table border="0" cellpadding="0" cellspacing="0" class="doc-parameters">
  <thead>
    <tr>
      <th class="doc-parameters-name" scope="col">Field</th>
      <th class="doc-parameters-value" scope="col">Value</th>
      <th class="doc-parameters-description" scope="col">Description</th>
    </tr>
  </thead>
  <tbody>
    <% fuels = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/fuels.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">fuel_type_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>The type of alternative fuel the station provides. Fuel types are given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% fuels.each do |fuel| %>
              <% next if fuel.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= fuel.fetch("key") %></th>
                <td><%= fuel.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">station_name</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The name of the station.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">street_address</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The street address of the station's location.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">intersection_directions</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Brief additional information about how to locate the station.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">city</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The city of the station's location.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">state</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The two character code for the U.S. state or Canadian province/territory of the station's location.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">zip</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The ZIP code (postal code) of the station's location.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">plus4</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The plus-4 portion of the station's ZIP code (U.S. ZIP codes only).</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">country</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>The two character country code of the station's location.</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% loader.fetch("countries").each do |country| %>
              <% next if country.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= country.fetch("key") %></th>
                <td><%= country.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">station_phone</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The phone number of the station.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">status_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>The current status of the station, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% loader.fetch("status_types").each do |status_type| %>
              <% next if status_type.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= status_type.fetch("key") %></th>
                <td><%= status_type.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">expected_date</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> date
        </div>
      </td>
      <td class="doc-parameter-description">For planned stations, the date the station is expected to open or start carrying alternative fuel. For temporarily unavailable stations, the expected date is the date the station is expected to reopen. This date is estimated but not guaranteed.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">access_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>A description of who is allowed to access the station, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% loader.fetch("access_types").each do |access_type| %>
              <% next if access_type.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= access_type.fetch("key") %></th>
                <td><%= access_type.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% access_details = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/access-details.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">access_detail_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>A description of other station access information, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% access_details.each do |access_detail| %>
              <% next if access_detail.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= access_detail.fetch("key") %></th>
                <td><%= access_detail.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">groups_with_access_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>Deprecated: See the <a href="#"><code>access_code</code></a>, <a href="#"><code>access_detail_code</code></a>, and <a href="#"><code>status</code></a> fields for equivalent information in a more structured format. (Note: this field will remain for legacy application support)</p>
        <p>A description of who is allowed to access the station and other station access information.</p>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">access_days_time</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Hours of operation for the station.</td>
    </tr>
    <% payment_methods = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/payment-methods.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">cards_accepted</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>A space-separated list of payment methods accepted. Payment methods are given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% payment_methods.each do |payment_method| %>
              <% next if payment_method.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= payment_method.fetch("key") %></th>
                <td><%= payment_method.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% owner_types = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/owner-types.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">owner_type_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>The type of organization that owns the fueling infrastructure. Owner types are given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% owner_types.each do |owner_type| %>
              <% next if owner_type.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= owner_type.fetch("key") %></th>
                <td><%= owner_type.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">federal_agency</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> record
        </div>
      </td>
      <td class="doc-parameter-description">
        If the station is owned by a federal agency, a record for the federal agency that owns this station. See <a href="#federal-agency-record-fields">federal agency record fields</a> for response details.
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">bd_blends</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For biodiesel stations, the level of biodiesel blends the station provides.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">e85_blender_pump</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> boolean
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For E85 stations, an indication of whether the station has a blender pump on site, given as a boolean:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th scope="row">true</th>
              <td>In addition to E85, the station has a blender pump capable of providing mid-level ethanol blends.</td>
            </tr>
            <tr>
              <th scope="row">false</th>
              <td>The station does not have a blender pump.</td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
    <% ethanol_blends = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/ethanol-blends.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">e85_other_ethanol_blends</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For E85 stations, an array of strings identifying the range(s) of blends other than E85 available at the station, given as code values described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% ethanol_blends.each do |ethanol_blend| %>
              <% next if ethanol_blend.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= ethanol_blend.fetch("key") %></th>
                <td><%= ethanol_blend.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% lpg_nozzle_types = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/lpg-nozzle-types.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">lpg_nozzle_types</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For LPG stations, an array of strings, identifying the type of nozzles available at the station, given as code values described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% lpg_nozzle_types.each do |lpg_nozzle_type| %>
              <% next if lpg_nozzle_type.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= lpg_nozzle_type.fetch("key") %></th>
                <td><%= lpg_nozzle_type.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr id="response-lpg-primary">
      <th class="doc-parameter-name" scope="row">lpg_primary</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> boolean
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For propane stations, the type of station, given as a boolean:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th scope="row">true</th>
              <td>
                Primary: A propane station is considered primary because it meets the following criteria, developed based on feedback from the propane industry:

                <ol>
                  <li>The station is staffed and able to fuel vehicles during normal business hours (e.g., 8am-5pm M-F), and does not require drivers to call ahead;</li>
                  <li>The station can fill vehicles at a rate of 8-12 gallons per minute or faster, or at a rate similar to filling a gasoline vehicle; and</li>
                  <li>The station accepts credit cards or fleet cards.</li>
                </ol>
              </td>
            </tr>
            <tr>
              <th scope="row">false</th>
              <td>Secondary: The station does not meet the criteria to be considered primary.</td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ng_fill_type_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Deprecated: See <a href="#cng-fill-type-code"><code>cng_fill_type_code</code></a>. (Note: this field will remain for legacy application support)</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ng_psi</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Deprecated: See <a href="#cng-psi"><code>cng_psi</code></a>. (Note: this field will remain for legacy application support)</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ng_vehicle_class</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Deprecated: For CNG stations, see <a href="#cng-vehicle-class"><code>cng_vehicle_class</code></a>. For LNG stations, see <a href="#lng-vehicle-class"><code>lng_vehicle_class</code></a>. (Note: this field will remain for legacy application support)</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">cng_dispenser_num</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">For CNG stations, the number of CNG dispensers installed.</td>
    </tr>
    <% cng_fill_types = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/cng-fill-types.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr id="cng-fill-type-code">
      <th class="doc-parameter-name" scope="row">cng_fill_type_code</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For CNG stations, the type of dispensing capability available, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% cng_fill_types.each do |cng_fill_type| %>
              <% next if cng_fill_type.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= cng_fill_type.fetch("key") %></th>
                <td><%= cng_fill_type.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% cng_psis = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/cng-psis.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr id="cng-psi">
      <th class="doc-parameter-name" scope="row">cng_psi</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For CNG stations, a space separated list of PSI pressures available.</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% cng_psis.each do |cng_psi| %>
              <% next if cng_psi.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= cng_psi.fetch("key") %></th>
                <td><%= cng_psi.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% renewable_sources = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/renewable-sources.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">cng_renewable_source</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For CNG stations, the type of renewable energy used to generate CNG on-site, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% renewable_sources.each do |renewable_source| %>
              <% next if renewable_source.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= renewable_source.fetch("key") %></th>
                <td><%= renewable_source.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">cng_total_compression</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">For CNG stations, the total compressor capacity per compressor, measured in standard cubic feet per minute (scfm).</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">cng_total_storage</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">For CNG stations, the total storage capacity, measured in standard cubic feet (scf).</td>
    </tr>
    <% cng_vehicle_classes = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/cng-vehicle-classes.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr id="cng-vehicle-class">
      <th class="doc-parameter-name" scope="row">cng_vehicle_class</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For CNG stations, the maximum vehicle size that can physically access the fueling infrastructure, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% cng_vehicle_classes.each do |cng_vehicle_class| %>
              <% next if cng_vehicle_class.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= cng_vehicle_class.fetch("key") %></th>
                <td><%= cng_vehicle_class.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
        <p>Note: This field does not take into account station capacity or other considerations.</p>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">lng_renewable_source</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For LNG stations, the type of renewable energy used to generate LNG on-site, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% renewable_sources.each do |renewable_source| %>
              <% next if renewable_source.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= renewable_source.fetch("key") %></th>
                <td><%= renewable_source.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% lng_vehicle_classes = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/lng-vehicle-classes.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr id="lng-vehicle-class">
      <th class="doc-parameter-name" scope="row">lng_vehicle_class</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For LNG stations, the maximum vehicle size that can physically access the fueling infrastructure, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% lng_vehicle_classes.each do |lng_vehicle_class| %>
              <% next if lng_vehicle_class.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= lng_vehicle_class.fetch("key") %></th>
                <td><%= lng_vehicle_class.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
        <p>Note: This field does not take into account station capacity or other considerations.</p>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_level1_evse_num</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">For electric stations, the number of Level 1 EVSE (standard 110V outlet).</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_level2_evse_num</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">For electric stations, the number of Level 2 EVSE (J1772 connector).</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_dc_fast_num</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">For electric stations, the number of DC Fast Chargers.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_other_evse</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        For electric stations, the number and type of additional EVSE, such as:

        <ul>
          <li>SP Inductive - Small paddle inductive</li>
          <li>LP Inductive - Large paddle inductive</li>
          <li>Avcon Conductive</li>
        </ul>
      </td>
    </tr>
    <% electric_connectors = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/electric-connectors.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_connector_types</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For electric stations, an array of strings identifying the connector types available at this station. Valid connector types are:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% electric_connectors.each do |electric_connector| %>
              <% next if electric_connector.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= electric_connector.fetch("key") %></th>
                <td><%= electric_connector.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_network</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For electric stations, the name of the EVSE network, if applicable.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_network_ids</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> record
        </div>
      </td>
      <td class="doc-parameter-description">
        For electric stations, if the station belongs to an EVSE network, a record describing the network-specific IDs for this station. See <a href="#ev-network-id-record-fields">EV network ID record fields</a> for response details.
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_network_web</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For electric stations, the EVSE network Web site, if applicable.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_pricing</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For EVSE stations, information about whether and how much users must pay to use the EVSE.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_renewable_source</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For EVSE stations, the type of renewable energy used to generate electricity on-site, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% renewable_sources.each do |renewable_source| %>
              <% next if renewable_source.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= renewable_source.fetch("key") %></th>
                <td><%= renewable_source.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">hy_is_retail</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For hydrogen stations, whether a station offers the retail sale of hydrogen by accepting payment at the point of sale, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <th scope="row">true</th>
              <td>Station meets the criteria to be considered retail.</td>
            </tr>
            <tr>
              <th scope="row">false</th>
              <td>Station does not meet the criteria to be considered retail.</td>
            </tr>
          </tbody>
        </table>
      </td>
    </tr>
    <% hy_pressures = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/hy-pressures.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">hy_pressures</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For hydrogen stations, any array of strings identifying the pressures of the hydrogen available (in bar), given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% hy_pressures.each do |hy_pressure| %>
              <% next if hy_pressure.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= hy_pressure.fetch("key") %></th>
                <td><%= hy_pressure.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% hy_standards = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/hy-standards.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">hy_standards</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>For hydrogen stations, any array of strings identifying which SAE International fueling protocol standard(s) the infrastructure meets, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% hy_standards.each do |hy_standard| %>
              <% next if hy_standard.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= hy_standard.fetch("key") %></th>
                <td><%= hy_standard.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">hy_status_link</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For hydrogen stations, a link to a website that provides up-to-date information about the current status of this hydrogen station.</td>
    </tr>
    <% geocode_statuses = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/geocode-statuses.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">geocode_status</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>A rating indicating the approximate accuracy of the latitude and longitude for the station's address, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% geocode_statuses.each do |geocode_status| %>
              <% next if geocode_status.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= geocode_status.fetch("key") %></th>
                <td><%= geocode_status.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">latitude</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> decimal
        </div>
        <div class="doc-parameter-value-field">
          <strong>Range:</strong> <em>-90</em> to <em>90</em>
        </div>
      </td>
      <td class="doc-parameter-description">The latitude of the station's address (see the "Geocode Status" field for details on the latitude's accuracy).</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">longitude</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> decimal
        </div>
        <div class="doc-parameter-value-field">
          <strong>Range:</strong> <em>-180</em> to <em>180</em>
        </div>
      </td>
      <td class="doc-parameter-description">The longitude of the station's address (see the "Geocode Status" field for details on the longitude's accuracy).</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">open_date</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> date
        </div>
      </td>
      <td class="doc-parameter-description">The date that the station began offering the fuel. Please note that most LPG (propane) stations do not have open dates. Some open dates are approximate. Also note that electric station records that are imported to the Station Locator on a daily basis through a network API do not have open dates. See the <a href="http://www.afdc.energy.gov/fuels/data_methods_stations.html">About the Alternative Fueling Station Data</a> page for more information.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">date_last_confirmed</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> date
        </div>
      </td>
      <td class="doc-parameter-description">The date the station's details were last confirmed.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">updated_at</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> datetime
        </div>
      </td>
      <td class="doc-parameter-description">
        The time the station's details were last updated (<a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> format).
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">id</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">A unique identifier for this specific station.</td>
    </tr>
    <% facility_types = MultiJson.load(RestClient.get("https://developer.nrel.gov/api/alt-fuel-stations/v1/facility-types.json", :params => { :country => "all", :api_key => ENV["DOCS_API_KEY"] })) %>
    <tr>
      <th class="doc-parameter-name" scope="row">facility_type</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>The type of facility at which the station is located, given as code values as described below:</p>
        <table border="0" cellpadding="0" cellspacing="0" class="table table-bordered">
          <thead>
            <tr>
              <th scope="col">Value</th>
              <th scope="col">Description</th>
            </tr>
          </thead>
          <tbody>
            <% facility_types.each do |facility_type| %>
              <% next if facility_type.fetch("key") == "all" %>
              <tr>
                <th scope="row"><%= facility_type.fetch("key") %></th>
                <td><%= facility_type.fetch("name") %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      </td>
    </tr>
    <% if(defined?(distance) && distance) %>
      <tr>
        <th class="doc-parameter-name" scope="row">distance</th>
        <td class="doc-parameter-value">
          <div class="doc-parameter-value-field">
            <strong>Type:</strong> decimal
          </div>
        </td>
        <td class="doc-parameter-description">The distance, in miles, from the given location and this station.</td>
      </tr>
    <% end %>
    <tr>
      <th class="doc-parameter-name" scope="row">intersection_directions_fr</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Brief additional information about how to locate the station, in French, if available.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">access_days_time_fr</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">Hours of operation for the station, in French, if available.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">bd_blends_fr</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For biodiesel stations, the level of biodiesel blends the station provides, in French, if available.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">groups_with_access_code_fr</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">
        <p>Deprecated: See the <a href="#"><code>access_code</code></a>, <a href="#"><code>access_detail_code</code></a>, and <a href="#"><code>status</code></a> fields for equivalent information in a more structured format. (Note: this field will remain for legacy application support)</p>
        <p>A description of who is allowed to access the station and other station access information, in French, if available.</p>
      </td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ev_pricing_fr</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">For EVSE stations, information about whether and how much users must pay to use the EVSE, in French, if available.</td>
    </tr>
  </tbody>
</table>

### Federal Agency Record Fields

<table border="0" cellpadding="0" cellspacing="0" class="doc-parameters">
  <thead>
    <tr>
      <th class="doc-parameters-name" scope="col">Field</th>
      <th class="doc-parameters-value" scope="col">Value</th>
      <th class="doc-parameters-description" scope="col">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th class="doc-parameter-name" scope="row">id</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> integer
        </div>
      </td>
      <td class="doc-parameter-description">A unique identifier for the federal agency.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">name</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The name of the federal agency.</td>
    </tr>
  </tbody>
</table>

### EV Network ID Record Fields

<table border="0" cellpadding="0" cellspacing="0" class="doc-parameters">
  <thead>
    <tr>
      <th class="doc-parameters-name" scope="col">Field</th>
      <th class="doc-parameters-value" scope="col">Value</th>
      <th class="doc-parameters-description" scope="col">Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th class="doc-parameter-name" scope="row">station</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> string
        </div>
      </td>
      <td class="doc-parameter-description">The identifier for the station provided by the EV network, if available.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">posts</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">An array of strings containing the identifier(s) for the post(s) provided by the EV network, if available.</td>
    </tr>
    <tr>
      <th class="doc-parameter-name" scope="row">ports</th>
      <td class="doc-parameter-value">
        <div class="doc-parameter-value-field">
          <strong>Type:</strong> array
        </div>
      </td>
      <td class="doc-parameter-description">An array of strings containing the identifier(s) for the port(s) provided by EV network, if available.</td>
    </tr>
  </tbody>
</table>
